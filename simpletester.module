<?php


/**
 * Implements hook_menu().
 */
function simpletester_menu() {
  $items['admin/config/development/simpletester/%'] = array(
    'title' => 'Choose tests',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('simpletester_choose_form', 4),
    'description' => 'Choose tests.',
    'access arguments' => array('administer unit tests'),
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function simpletester_theme() {

  return array(
    'simpletester_test_table' => array(
      'render element' => 'table',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function simpletester_form_simpletest_test_form_alter(&$form, &$form_state, $form_id) {
  // Override simpletest_test_form() so we can add links to choose tests.
  $form['tests']['table']['#theme'] = 'simpletester_test_table';

  // Attach dialog library.
  $form['#attached'] = array(
    'library' => array(
      array('system', 'backdrop.ajax'),
      array('system', 'backdrop.dialog'),
    ),
  );
  unset($_SESSION['simpletester_running_tests']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function simpletester_form_simpletest_result_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($_SESSION['simpletester_running_tests'])) {
    $form_state['simpletester_running_tests'] = $_SESSION['simpletester_running_tests'];
    $form['help'] = array(
      '#markup' => theme('item_list', array(
        'items' => $_SESSION['simpletester_running_tests'],
        'title' => t('The following test cases were run:'))),
      '#weight' => -999,
    );

    $form['action']['filter'] = array();
    $form['action']['op']['#value'] = t('Re-run test cases');
    $form['#submit'] = array('simpletester_result_form_submit');
  }
}

/**
 * Re-run the tests that match the filter.
 */
function simpletester_result_form_submit($form, &$form_state) {
  $pass = $form_state['values']['filter_pass'] ? explode(',', $form_state['values']['filter_pass']) : array();
  $fail = $form_state['values']['filter_fail'] ? explode(',', $form_state['values']['filter_fail']) : array();

  $classes = array_merge($pass, $fail);
  if (!$classes) {
    $form_state['redirect'] = 'admin/config/development/testing';
    return;
  }
  if (empty($form_state['simpletester_running_tests'])) {
    $form_state['redirect'] = 'admin/config/development/testing';
    return;
  }

  $form_state_execute = array('values' => array());
  $form_state_execute['test_class_name'] = reset($classes);
  $form_state_execute['values']['tests'] = $form_state['simpletester_running_tests'];

  simpletester_test_form_submit(array(), $form_state_execute);
  $form_state['redirect'] = '';
}

/**
 * Returns HTML for a test list generated by simpletest_test_form() into a table.
 *
 * This is a copy of theme_simpletest_test_table().
 *
 * @param $variables
 *   An associative array containing:
 *   - table: A render element representing the table.
 *
 * @ingroup themeable
 */
function theme_simpletester_test_table($variables) {
  $table = $variables['table'];

  backdrop_add_css(backdrop_get_path('module', 'simpletest') . '/css/simpletest.css');
  backdrop_add_js(backdrop_get_path('module', 'simpletest') . '/js/simpletest.js');
  backdrop_add_js('core/misc/tableselect.js');

  // Create header for test selection table.
  $header = array(
    array('class' => array('select-all')),
    array('data' => t('Test'), 'class' => array('simpletest-test')),
    array('data' => t('Description'), 'class' => array('simpletest_description')),
    array('data' => '', 'class' => array('simpletest_choose_test')),
  );

  // Define the images used to expand/collapse the test groups.
  $js = array(
    'images' => array(
      theme('image', array('path' => 'core/misc/menu-collapsed.png', 'width' => 7, 'height' => 7, 'alt' => t('Expand'), 'title' => t('Expand'))) . ' <a href="#" class="simpletest-collapse">(' . t('Expand') . ')</a>',
      theme('image', array('path' => 'core/misc/menu-expanded.png', 'width' => 7, 'height' => 7, 'alt' => t('Collapse'), 'title' => t('Collapse'))) . ' <a href="#" class="simpletest-collapse">(' . t('Collapse') . ')</a>',
    ),
  );
  backdrop_add_js(array('simpleTest' => $js), 'setting');

  // Cycle through each test group and create a row.
  $rows = array();
  foreach (element_children($table) as $key) {
    $element = &$table[$key];
    $row = array();

    // Make the class name safe for output on the page by replacing all
    // non-word/decimal characters with a dash (-).
    $test_class = strtolower(trim(preg_replace("/[^\w\d]/", "-", $key)));

    // Select the right "expand"/"collapse" image, depending on whether the
    // category is expanded (at least one test selected) or not.
    $collapsed = !empty($element['#collapsed']);
    $image_index = $collapsed ? 0 : 1;

    // Place-holder for checkboxes to select group of tests.
    $row[] = array('id' => $test_class, 'class' => array('simpletest-group-select-all'));

    // Expand/collapse image and group title.
    $row[] = array(
      'data' => '<span class="simpletest-image" id="simpletest-test-group-' . $test_class . '"></span>' .
        '<label for="' . $test_class . '-group-select-all">' . $key . '</label>',
      'class' => array('simpletest-group-label'),
    );

    $row[] = array(
      'data' => '&nbsp;',
      'class' => array('simpletest-group-description'),
    );
    $row[] = array(
      'data' => '&nbsp;',
      'class' => array('simpletest-group-choose-test-col'),
    );

    $rows[] = array('data' => $row, 'class' => array('simpletest-group'));

    // Sorting $element by children's #title attribute instead of by class name.
    backdrop_sort($element, array('#title' => SORT_STRING));

    // Cycle through each test within the current group.
    foreach (element_children($element) as $test_class_name) {
      $test = $element[$test_class_name];
      $row = array();

      // Store test title and description so that checkbox won't render them.
      $title = $test['#title'];
      $description = $test['#description'];

      $test['#title_display'] = 'invisible';
      unset($test['#description']);

      $row[] = array(
        'data' => backdrop_render($test),
        'class' => array('simpletest-test-select'),
      );
      $row[] = array(
        'data' => '<label for="' . $test['#id'] . '">' . $title . '</label><span class="description test-name"> (' . $test_class_name . ')</span>',
        'class' => array('simpletest-test-label'),
      );
      $row[] = array(
        'data' => '<div class="description">' . $description . '</div>',
        'class' => array('simpletest-test-description'),
      );
      $choose_link = array(
        '#type' => 'item',
        '#markup' => l(
          t('Choose tests'),
          'admin/config/development/simpletester/' . $test_class_name,
          array(
            'attributes' => array(
              'class' => array('use-ajax block-item'),
              'data-dialog' => TRUE,
              'data-dialog-options' => json_encode(array('dialogClass' => 'simpletester-dialog', 'width' => 500)),
            )
          )
        ),
        '#description' => NULL,
      );

      $row[] = array(
        'data' => backdrop_render($choose_link),
        'class' => array('simpletest-choose-test'),
      );

      $rows[] = array('data' => $row, 'class' => array($test_class . '-test', ($collapsed ? 'js-hide' : '')));
    }
    unset($table[$key]);
  }

  if (empty($rows)) {
    return '<strong>' . t('No tests to display.') . '</strong>';
  }
  else {
    return theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'simpletest-form-table')));
  }
}

/**
 * List all test methods in a chosen test class. Displayed in dialog.
 */
function simpletester_choose_form($form, &$form_state, $test_class_name) {
  $form_state['test_class_name'] = $test_class_name;
  $test_info = simpletest_test_get_by_class($test_class_name);
  include_once BACKDROP_ROOT . '/' .  $test_info['file path'] . '/' . $test_info['file'];
  $test_instance = new $test_class_name();

  $this_test = get_class($test_instance);
  $class_methods = get_class_methods($this_test);

  $tests = array();
    foreach ($class_methods as $method) {
      if (strtolower(substr($method, 0, 4)) == 'test') {
        $tests[$method] = $method;
      }
    }

  $form['choose-test-wrapper'] = array(
    '#type' => 'fieldset',
    '#attributes' => array(
      'class' => array('choose-test-wrapper'),
    ),
  );
  $form['choose-test-wrapper']['tests'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Available tests:'),
    '#options' => $tests,
  );

  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#submit' => array(
      'simpletester_test_form_submit',
    ),
    '#validate' => array(
      'simpletester_test_form_validate',
    ),
    '#value' => t('Run tests'),
  );

  return $form;
}

/**
 * Submit handler for simpletester_choose_form().
 */
function simpletester_test_form_validate($form, &$form_state) {
  if (empty(array_values(array_filter($form_state['values']['tests'])))) {
    backdrop_set_message(t('No tests were selected.'), 'error');
    backdrop_goto('admin/config/development/testing');
  }
}

/**
 * Submit handler for simpletester_choose_form().
 */
function simpletester_test_form_submit($form, &$form_state) {
  $tests = array_values(array_filter($form_state['values']['tests']));
  $_SESSION['simpletester_running_tests'] = $tests;
  $test_id = simpletester_run_tests($form_state['test_class_name'], $tests);
}

/**
 * Copy of simpletest_run_tests().
 *
 * @param $test_class_name
 *   The test class.
 * @param $tests
 *   Test methods within the test class.
 */
function simpletester_run_tests($test_class_name, $tests) {
  // Simpletest batch operations and hooks expect a list of tests.
  $test_list = array($test_class_name);

  $test_id = db_query("SELECT MAX(test_id) FROM {simpletest_prefix}")->fetchField() + 1;

  // Clear out the previous verbose files.
  if (file_exists('public://simpletest/verbose')) {
    file_unmanaged_delete_recursive('public://simpletest/verbose');
  }

  $cache = config_get('simpletest.settings', 'simpletest_cache');
  if ($cache) {
    $profiles = simpletest_get_profiles();
    foreach ($profiles as $profile) {
      try {
        $test_cache = new BackdropWebTestCaseCache();
        $test_cache->setProfile($profile->name);
        if (!$test_cache->isCached()) {
          $test_cache->prepareCache(TRUE);
        }
      }
      catch (Exception $e) {
        watchdog_exception('simpletest', $e, $e->getMessage());
      }
    }
  }

  $first_test = array_shift($test_list);
  $test_info = simpletest_test_get_by_class($first_test);
  include_once BACKDROP_ROOT . '/' .  $test_info['file path'] . '/' . $test_info['file'];
  $test_instance = new $first_test();
  array_unshift($test_list, $first_test);
  $info = simpletest_test_get_by_class(get_class($test_instance));
  $test_count = format_plural(count($tests), '1 test', '@count tests');

  $batch = array(
    'title' => t('Running tests'),
    'operations' => array(
      array('_simpletester_batch_operation', array($test_list, $test_id, $tests)),
    ),
    'finished' => '_simpletester_batch_finished',
    'progress_message' => '',
    'css' => array(backdrop_get_path('module', 'simpletest') . '/css/simpletest.css'),
    'init_message' => t('Processing @test_count from %test.', array('%test' => $info['name'], '@test_count' => $test_count)),
  );
  batch_set($batch);

  batch_process('admin/config/development/testing/results/' . $test_id);

  module_invoke_all('test_group_started');

  return $test_id;
}

/**
 * Batch operation callback.
 *
 * Copy of _simpletest_batch_operation().
 */
function _simpletester_batch_operation($test_list_init, $test_id, $tests, &$context) {
  // Get working values.

  if (!isset($context['sandbox']['max'])) {
    // First iteration: initialize working values.
    $test_list = $test_list_init;
    $context['sandbox']['max'] = count($test_list);
    $test_results = array('#pass' => 0, '#fail' => 0, '#exception' => 0, '#debug' => 0, '#duration' => 0);
  }
  else {
    // Nth iteration: get the current values where we last stored them.
    $test_list = $context['sandbox']['tests'];
    $test_results = $context['sandbox']['test_results'];
  }
  $max = $context['sandbox']['max'];

  // Perform the next test.
  $test_class = array_shift($test_list);
  $test_info = simpletest_test_get_by_class($test_class);
  include_once BACKDROP_ROOT . '/' . $test_info['file path'] . '/' . $test_info['file'];
  $test = new $test_class($test_id);
  $test->run($tests);
  $size = count($test_list);
  $info = simpletest_test_get_by_class(get_class($test));

  module_invoke_all('test_finished', $test->results);

  // Gather results and compose the report.
  $test_results[$test_class] = $test->results;
  foreach ($test_results[$test_class] as $key => $value) {
    $test_results[$key] += $value;
  }
  $test_results[$test_class]['#name'] = $info['name'];
  $items = array();
  foreach (element_children($test_results) as $class) {
    array_unshift($items, '<div class="simpletest-' . ($test_results[$class]['#fail'] + $test_results[$class]['#exception'] ? 'fail' : 'pass') . '">' . t('@name: @summary', array('@name' => $test_results[$class]['#name'], '@summary' => _simpletest_format_summary_line($test_results[$class]))) . '</div>');
  }
  $context['message'] = t('Processed test @num of @max - %test.', array('%test' => $info['name'], '@num' => $max - $size, '@max' => $max));
  $context['message'] .= '<div class="simpletest-' . ($test_results['#fail'] + $test_results['#exception'] ? 'fail' : 'pass') . '">Overall results: ' . _simpletest_format_summary_line($test_results) . '</div>';
  $context['message'] .= theme('item_list', array('items' => $items));

  // Save working values for the next iteration.
  $context['sandbox']['tests'] = $test_list;
  $context['sandbox']['test_results'] = $test_results;
  // The test_id is the only thing we need to save for the report page.
  $context['results']['test_id'] = $test_id;

  // Multistep processing: report progress.
  $context['finished'] = 1 - $size / $max;
}

/**
 * Batch operation finished callback.
 *
 * Copy of _simpletest_batch_finished().
 */
function _simpletester_batch_finished($success, $results, $operations, $elapsed) {
  if ($success) {
    backdrop_set_message(t('The test run finished in @elapsed.', array('@elapsed' => $elapsed)));
  }
  else {
    // If any uncompleted operations are left, we can use the next item to pull
    // the test_id and report any errors from the test log.
    if (!empty($operations)) {
      // Use the test_id passed as a parameter to _simpletest_batch_operation().
      $next_operation = reset($operations);
      $test_id = $next_operation[1][1];

      // Retrieve the last database prefix used for testing and the last test
      // class that was run from. Use the information to read the lgo file
      // in case any fatal errors caused the test to crash.
      list($last_prefix, $last_test_class) = simpletest_last_test_get($test_id);
      simpletest_log_read($test_id, $last_prefix, $last_test_class);
    }

    backdrop_set_message(t('The test run did not successfully finish.'), 'error');
    backdrop_set_message(t('Use the <em>Clean environment</em> button to clean-up temporary files and tables.'), 'warning');
  }
  module_invoke_all('test_group_finished');
}
